using namespace std;
/*
 * Code d'exemple pour un capteur à ultrasons HC-SR04.
 */

/* Constantes pour les broches */
const byte TRIGGER_PIN = 2; // Broche TRIGGER
const byte ECHO_PIN = 3;	// Broche ECHO
 
/* Constantes pour le timeout */
const unsigned long MEASURE_TIMEOUT = 25000UL; // 25ms = ~8m à 340m/s

/* Vitesse du son dans l'air en mm/us */
const float SOUND_SPEED = 340.0 / 1000;

/** Fonction setup() */
void setup() {
   
  /* Initialise le port série */
  Serial.begin(9600);
   
  /* Initialise les broches */
  pinMode(TRIGGER_PIN, OUTPUT);
  digitalWrite(TRIGGER_PIN, LOW); // La broche TRIGGER doit être à LOW au repos
  pinMode(ECHO_PIN, INPUT);
}
 
/** Fonction loop() */
void loop() {
 
  /* 1. Lance une mesure de distance en envoyant une impulsion HIGH de 10µs sur la broche TRIGGER */
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
 
  /* 2. Mesure le temps entre l'envoi de l'impulsion ultrasonique et son écho (si il existe) */
  long measure = pulseIn(ECHO_PIN, HIGH, MEASURE_TIMEOUT);
   
  /* 3. Calcul la distance à partir du temps mesuré */
  float distance_mm = measure / 2.0 * SOUND_SPEED;
   
  /* Affiche les résultats en mm, cm et m */
  Serial.print(F("Distance: "));
  Serial.print(distance_mm);
  Serial.print(F("mm ("));
  Serial.print(distance_mm / 10.0, 2);
  Serial.print(F("cm, "));
  Serial.print(distance_mm / 1000.0, 2);
  Serial.println(F("m)"));
   
  /* Délai d'attente pour éviter d'afficher trop de résultats à la seconde */
  delay(500);
}
int signalPin_Gauche = 2; //capteur de ligne grove seeedstudio
int signalPin_Droite = 3; //capteur de ligne grove seeedstudio
int Motor1 = 4; // L293D - premier moteur pin 1 (Gauche)
int Motor3 = 6; // L293D - second moteur pin 1 (Droite)
int Enable1_2 = 8; // L293D - les 2 pins enable

void setup() {
 
pinMode(signalPin_Gauche, INPUT);
pinMode(signalPin_Droite, INPUT);
pinMode(Motor1, OUTPUT); // Gauche
pinMode(Motor3, OUTPUT); // Droite
pinMode(Enable1_2 , OUTPUT);
digitalWrite(Enable1_2, HIGH);

Serial.begin(9600);
}


void loop()
{
 
if(HIGH == digitalRead(signalPin_Gauche)) // si le capteur de gauche se met en etat HIGH le robot doit se deplacer vers la droite
{
digitalWrite(Motor3, LOW); // Droite eteint
digitalWrite(Motor1, HIGH); // Gauche allumer
}

else // sinon on allume les 2 moteurs et le robot va tout droit
{
digitalWrite(Motor1, HIGH); // Droite allumer
digitalWrite(Motor3, HIGH); //Gauche allumer
}

if(HIGH == digitalRead(signalPin_Droite)) // si le capteur de droite se met en etat HIGH le robot doit se deplacer vers la gauche
{
digitalWrite(Motor3, HIGH); // Droite allumer
digitalWrite(Motor1, LOW); //Gauche eteint
}

else // sinon on allume les 2 moteurs et le robot va tout droit
{
digitalWrite(Motor1, HIGH); // Droite allumer
digitalWrite(Motor3, HIGH); //Gauche allumer
}

}
